#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Bu kod araç tarafından oluşturuldu.
//     Çalışma Zamanı Sürümü:4.0.30319.42000
//
//     Bu dosyada yapılacak değişiklikler yanlış davranışa neden olabilir ve
//     kod yeniden oluşturulursa kaybolur.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BarkodSistemTekstil.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BarcodeSystem")]
	public partial class BarcodeSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomerProcces(CustomerProcces instance);
    partial void UpdateCustomerProcces(CustomerProcces instance);
    partial void DeleteCustomerProcces(CustomerProcces instance);
    partial void InsertOpeationProduct(OpeationProduct instance);
    partial void UpdateOpeationProduct(OpeationProduct instance);
    partial void DeleteOpeationProduct(OpeationProduct instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertSubTboCategories(SubTboCategories instance);
    partial void UpdateSubTboCategories(SubTboCategories instance);
    partial void DeleteSubTboCategories(SubTboCategories instance);
    partial void InsertSubTboPaymentMethod(SubTboPaymentMethod instance);
    partial void UpdateSubTboPaymentMethod(SubTboPaymentMethod instance);
    partial void DeleteSubTboPaymentMethod(SubTboPaymentMethod instance);
    partial void InsertSubTboProccesList(SubTboProccesList instance);
    partial void UpdateSubTboProccesList(SubTboProccesList instance);
    partial void DeleteSubTboProccesList(SubTboProccesList instance);
    partial void InsertSubTboRefCustomer(SubTboRefCustomer instance);
    partial void UpdateSubTboRefCustomer(SubTboRefCustomer instance);
    partial void DeleteSubTboRefCustomer(SubTboRefCustomer instance);
    #endregion
		
		public BarcodeSystemDataContext() : 
				base(global::BarkodSistemTekstil.Properties.Settings.Default.BarcodeSystemConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public BarcodeSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarcodeSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarcodeSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BarcodeSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customer
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomerProcces> CustomerProcces
		{
			get
			{
				return this.GetTable<CustomerProcces>();
			}
		}
		
		public System.Data.Linq.Table<OpeationProduct> OpeationProduct
		{
			get
			{
				return this.GetTable<OpeationProduct>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sale
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stock
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<SubTboCategories> SubTboCategories
		{
			get
			{
				return this.GetTable<SubTboCategories>();
			}
		}
		
		public System.Data.Linq.Table<SubTboPaymentMethod> SubTboPaymentMethod
		{
			get
			{
				return this.GetTable<SubTboPaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<SubTboProccesList> SubTboProccesList
		{
			get
			{
				return this.GetTable<SubTboProccesList>();
			}
		}
		
		public System.Data.Linq.Table<SubTboRefCustomer> SubTboRefCustomer
		{
			get
			{
				return this.GetTable<SubTboRefCustomer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _CustomerName;
		
		private string _CustomerSurname;
		
		private string _CustomerAddress;
		
		private string _CustomerTelephone;
		
		private string _CustomerOccupotion;
		
		private string _CustomerDetails;
		
		private System.Nullable<int> _CustomerReference;
		
		private System.Nullable<decimal> _CustomerAccount;
		
		private System.Nullable<System.DateTime> _CustomerRegistrationDate;
		
		private EntitySet<CustomerProcces> _CustomerProcces;
		
		private EntitySet<Sale> _Sale;
		
		private EntityRef<SubTboRefCustomer> _SubTboRefCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerSurnameChanging(string value);
    partial void OnCustomerSurnameChanged();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnCustomerTelephoneChanging(string value);
    partial void OnCustomerTelephoneChanged();
    partial void OnCustomerOccupotionChanging(string value);
    partial void OnCustomerOccupotionChanged();
    partial void OnCustomerDetailsChanging(string value);
    partial void OnCustomerDetailsChanged();
    partial void OnCustomerReferenceChanging(System.Nullable<int> value);
    partial void OnCustomerReferenceChanged();
    partial void OnCustomerAccountChanging(System.Nullable<decimal> value);
    partial void OnCustomerAccountChanged();
    partial void OnCustomerRegistrationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCustomerRegistrationDateChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerProcces = new EntitySet<CustomerProcces>(new Action<CustomerProcces>(this.attach_CustomerProcces), new Action<CustomerProcces>(this.detach_CustomerProcces));
			this._Sale = new EntitySet<Sale>(new Action<Sale>(this.attach_Sale), new Action<Sale>(this.detach_Sale));
			this._SubTboRefCustomer = default(EntityRef<SubTboRefCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerSurname", DbType="NVarChar(150)")]
		public string CustomerSurname
		{
			get
			{
				return this._CustomerSurname;
			}
			set
			{
				if ((this._CustomerSurname != value))
				{
					this.OnCustomerSurnameChanging(value);
					this.SendPropertyChanging();
					this._CustomerSurname = value;
					this.SendPropertyChanged("CustomerSurname");
					this.OnCustomerSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(400)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTelephone", DbType="NVarChar(15)")]
		public string CustomerTelephone
		{
			get
			{
				return this._CustomerTelephone;
			}
			set
			{
				if ((this._CustomerTelephone != value))
				{
					this.OnCustomerTelephoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerTelephone = value;
					this.SendPropertyChanged("CustomerTelephone");
					this.OnCustomerTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerOccupotion", DbType="NVarChar(150)")]
		public string CustomerOccupotion
		{
			get
			{
				return this._CustomerOccupotion;
			}
			set
			{
				if ((this._CustomerOccupotion != value))
				{
					this.OnCustomerOccupotionChanging(value);
					this.SendPropertyChanging();
					this._CustomerOccupotion = value;
					this.SendPropertyChanged("CustomerOccupotion");
					this.OnCustomerOccupotionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerDetails", DbType="NVarChar(MAX)")]
		public string CustomerDetails
		{
			get
			{
				return this._CustomerDetails;
			}
			set
			{
				if ((this._CustomerDetails != value))
				{
					this.OnCustomerDetailsChanging(value);
					this.SendPropertyChanging();
					this._CustomerDetails = value;
					this.SendPropertyChanged("CustomerDetails");
					this.OnCustomerDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerReference", DbType="Int")]
		public System.Nullable<int> CustomerReference
		{
			get
			{
				return this._CustomerReference;
			}
			set
			{
				if ((this._CustomerReference != value))
				{
					if (this._SubTboRefCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerReferenceChanging(value);
					this.SendPropertyChanging();
					this._CustomerReference = value;
					this.SendPropertyChanged("CustomerReference");
					this.OnCustomerReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAccount", DbType="Money")]
		public System.Nullable<decimal> CustomerAccount
		{
			get
			{
				return this._CustomerAccount;
			}
			set
			{
				if ((this._CustomerAccount != value))
				{
					this.OnCustomerAccountChanging(value);
					this.SendPropertyChanging();
					this._CustomerAccount = value;
					this.SendPropertyChanged("CustomerAccount");
					this.OnCustomerAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerRegistrationDate", DbType="Date")]
		public System.Nullable<System.DateTime> CustomerRegistrationDate
		{
			get
			{
				return this._CustomerRegistrationDate;
			}
			set
			{
				if ((this._CustomerRegistrationDate != value))
				{
					this.OnCustomerRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._CustomerRegistrationDate = value;
					this.SendPropertyChanged("CustomerRegistrationDate");
					this.OnCustomerRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerProcces", Storage="_CustomerProcces", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CustomerProcces> CustomerProcces
		{
			get
			{
				return this._CustomerProcces;
			}
			set
			{
				this._CustomerProcces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Sale", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Sale> Sale
		{
			get
			{
				return this._Sale;
			}
			set
			{
				this._Sale.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboRefCustomer_Customer", Storage="_SubTboRefCustomer", ThisKey="CustomerReference", OtherKey="RefUserID", IsForeignKey=true)]
		public SubTboRefCustomer SubTboRefCustomer
		{
			get
			{
				return this._SubTboRefCustomer.Entity;
			}
			set
			{
				SubTboRefCustomer previousValue = this._SubTboRefCustomer.Entity;
				if (((previousValue != value) 
							|| (this._SubTboRefCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubTboRefCustomer.Entity = null;
						previousValue.Customer.Remove(this);
					}
					this._SubTboRefCustomer.Entity = value;
					if ((value != null))
					{
						value.Customer.Add(this);
						this._CustomerReference = value.RefUserID;
					}
					else
					{
						this._CustomerReference = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubTboRefCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerProcces(CustomerProcces entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerProcces(CustomerProcces entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Sale(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sale(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerProcces")]
	public partial class CustomerProcces : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerProccesID;
		
		private int _CustomerID;
		
		private int _ProccesType;
		
		private decimal _ProccesPrice;
		
		private System.DateTime _ProccesDate;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<SubTboProccesList> _SubTboProccesList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerProccesIDChanging(int value);
    partial void OnCustomerProccesIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnProccesTypeChanging(int value);
    partial void OnProccesTypeChanged();
    partial void OnProccesPriceChanging(decimal value);
    partial void OnProccesPriceChanged();
    partial void OnProccesDateChanging(System.DateTime value);
    partial void OnProccesDateChanged();
    #endregion
		
		public CustomerProcces()
		{
			this._Customer = default(EntityRef<Customer>);
			this._SubTboProccesList = default(EntityRef<SubTboProccesList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerProccesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerProccesID
		{
			get
			{
				return this._CustomerProccesID;
			}
			set
			{
				if ((this._CustomerProccesID != value))
				{
					this.OnCustomerProccesIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerProccesID = value;
					this.SendPropertyChanged("CustomerProccesID");
					this.OnCustomerProccesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProccesType", DbType="Int NOT NULL")]
		public int ProccesType
		{
			get
			{
				return this._ProccesType;
			}
			set
			{
				if ((this._ProccesType != value))
				{
					if (this._SubTboProccesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProccesTypeChanging(value);
					this.SendPropertyChanging();
					this._ProccesType = value;
					this.SendPropertyChanged("ProccesType");
					this.OnProccesTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProccesPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal ProccesPrice
		{
			get
			{
				return this._ProccesPrice;
			}
			set
			{
				if ((this._ProccesPrice != value))
				{
					this.OnProccesPriceChanging(value);
					this.SendPropertyChanging();
					this._ProccesPrice = value;
					this.SendPropertyChanged("ProccesPrice");
					this.OnProccesPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProccesDate", DbType="Date NOT NULL")]
		public System.DateTime ProccesDate
		{
			get
			{
				return this._ProccesDate;
			}
			set
			{
				if ((this._ProccesDate != value))
				{
					this.OnProccesDateChanging(value);
					this.SendPropertyChanging();
					this._ProccesDate = value;
					this.SendPropertyChanged("ProccesDate");
					this.OnProccesDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerProcces", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerProcces.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerProcces.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboProccesList_CustomerProcces", Storage="_SubTboProccesList", ThisKey="ProccesType", OtherKey="ProccesID", IsForeignKey=true)]
		public SubTboProccesList SubTboProccesList
		{
			get
			{
				return this._SubTboProccesList.Entity;
			}
			set
			{
				SubTboProccesList previousValue = this._SubTboProccesList.Entity;
				if (((previousValue != value) 
							|| (this._SubTboProccesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubTboProccesList.Entity = null;
						previousValue.CustomerProcces.Remove(this);
					}
					this._SubTboProccesList.Entity = value;
					if ((value != null))
					{
						value.CustomerProcces.Add(this);
						this._ProccesType = value.ProccesID;
					}
					else
					{
						this._ProccesType = default(int);
					}
					this.SendPropertyChanged("SubTboProccesList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OpeationProduct")]
	public partial class OpeationProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationID;
		
		private int _SaleProduct;
		
		private int _ProductID;
		
		private System.Nullable<decimal> _ProductDiscount;
		
		private System.Nullable<decimal> _ProductPrice;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Sale> _Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationIDChanging(int value);
    partial void OnOperationIDChanged();
    partial void OnSaleProductChanging(int value);
    partial void OnSaleProductChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductDiscountChanging(System.Nullable<decimal> value);
    partial void OnProductDiscountChanged();
    partial void OnProductPriceChanging(System.Nullable<decimal> value);
    partial void OnProductPriceChanged();
    #endregion
		
		public OpeationProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._Sale = default(EntityRef<Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleProduct", DbType="Int NOT NULL")]
		public int SaleProduct
		{
			get
			{
				return this._SaleProduct;
			}
			set
			{
				if ((this._SaleProduct != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleProductChanging(value);
					this.SendPropertyChanging();
					this._SaleProduct = value;
					this.SendPropertyChanged("SaleProduct");
					this.OnSaleProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ProductDiscount
		{
			get
			{
				return this._ProductDiscount;
			}
			set
			{
				if ((this._ProductDiscount != value))
				{
					this.OnProductDiscountChanging(value);
					this.SendPropertyChanging();
					this._ProductDiscount = value;
					this.SendPropertyChanged("ProductDiscount");
					this.OnProductDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ProductPrice
		{
			get
			{
				return this._ProductPrice;
			}
			set
			{
				if ((this._ProductPrice != value))
				{
					this.OnProductPriceChanging(value);
					this.SendPropertyChanging();
					this._ProductPrice = value;
					this.SendPropertyChanged("ProductPrice");
					this.OnProductPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OpeationProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OpeationProduct.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OpeationProduct.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_OpeationProduct", Storage="_Sale", ThisKey="SaleProduct", OtherKey="SaleID", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.OpeationProduct.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.OpeationProduct.Add(this);
						this._SaleProduct = value.SaleID;
					}
					else
					{
						this._SaleProduct = default(int);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductBarcode;
		
		private string _ProductName;
		
		private System.Nullable<int> _ProductCategorie;
		
		private string _ProductSize;
		
		private System.Nullable<double> _ProductSalePrice;
		
		private string _ProductDescription;
		
		private System.Nullable<bool> _ProductDelete;
		
		private System.Nullable<long> _ProductPiece;
		
		private EntitySet<OpeationProduct> _OpeationProduct;
		
		private EntitySet<Stock> _Stock;
		
		private EntityRef<SubTboCategories> _SubTboCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductBarcodeChanging(string value);
    partial void OnProductBarcodeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductCategorieChanging(System.Nullable<int> value);
    partial void OnProductCategorieChanged();
    partial void OnProductSizeChanging(string value);
    partial void OnProductSizeChanged();
    partial void OnProductSalePriceChanging(System.Nullable<double> value);
    partial void OnProductSalePriceChanged();
    partial void OnProductDescriptionChanging(string value);
    partial void OnProductDescriptionChanged();
    partial void OnProductDeleteChanging(System.Nullable<bool> value);
    partial void OnProductDeleteChanged();
    partial void OnProductPieceChanging(System.Nullable<long> value);
    partial void OnProductPieceChanged();
    #endregion
		
		public Product()
		{
			this._OpeationProduct = new EntitySet<OpeationProduct>(new Action<OpeationProduct>(this.attach_OpeationProduct), new Action<OpeationProduct>(this.detach_OpeationProduct));
			this._Stock = new EntitySet<Stock>(new Action<Stock>(this.attach_Stock), new Action<Stock>(this.detach_Stock));
			this._SubTboCategories = default(EntityRef<SubTboCategories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductBarcode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductBarcode
		{
			get
			{
				return this._ProductBarcode;
			}
			set
			{
				if ((this._ProductBarcode != value))
				{
					this.OnProductBarcodeChanging(value);
					this.SendPropertyChanging();
					this._ProductBarcode = value;
					this.SendPropertyChanged("ProductBarcode");
					this.OnProductBarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(150)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategorie", DbType="Int")]
		public System.Nullable<int> ProductCategorie
		{
			get
			{
				return this._ProductCategorie;
			}
			set
			{
				if ((this._ProductCategorie != value))
				{
					if (this._SubTboCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductCategorieChanging(value);
					this.SendPropertyChanging();
					this._ProductCategorie = value;
					this.SendPropertyChanged("ProductCategorie");
					this.OnProductCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSize", DbType="NVarChar(10)")]
		public string ProductSize
		{
			get
			{
				return this._ProductSize;
			}
			set
			{
				if ((this._ProductSize != value))
				{
					this.OnProductSizeChanging(value);
					this.SendPropertyChanging();
					this._ProductSize = value;
					this.SendPropertyChanged("ProductSize");
					this.OnProductSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSalePrice", DbType="Float")]
		public System.Nullable<double> ProductSalePrice
		{
			get
			{
				return this._ProductSalePrice;
			}
			set
			{
				if ((this._ProductSalePrice != value))
				{
					this.OnProductSalePriceChanging(value);
					this.SendPropertyChanging();
					this._ProductSalePrice = value;
					this.SendPropertyChanged("ProductSalePrice");
					this.OnProductSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDescription", DbType="NVarChar(250)")]
		public string ProductDescription
		{
			get
			{
				return this._ProductDescription;
			}
			set
			{
				if ((this._ProductDescription != value))
				{
					this.OnProductDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProductDescription = value;
					this.SendPropertyChanged("ProductDescription");
					this.OnProductDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDelete", DbType="Bit")]
		public System.Nullable<bool> ProductDelete
		{
			get
			{
				return this._ProductDelete;
			}
			set
			{
				if ((this._ProductDelete != value))
				{
					this.OnProductDeleteChanging(value);
					this.SendPropertyChanging();
					this._ProductDelete = value;
					this.SendPropertyChanged("ProductDelete");
					this.OnProductDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPiece", DbType="BigInt")]
		public System.Nullable<long> ProductPiece
		{
			get
			{
				return this._ProductPiece;
			}
			set
			{
				if ((this._ProductPiece != value))
				{
					this.OnProductPieceChanging(value);
					this.SendPropertyChanging();
					this._ProductPiece = value;
					this.SendPropertyChanged("ProductPiece");
					this.OnProductPieceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OpeationProduct", Storage="_OpeationProduct", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<OpeationProduct> OpeationProduct
		{
			get
			{
				return this._OpeationProduct;
			}
			set
			{
				this._OpeationProduct.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stock", Storage="_Stock", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Stock> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				this._Stock.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboCategories_Product", Storage="_SubTboCategories", ThisKey="ProductCategorie", OtherKey="CategoryID", IsForeignKey=true)]
		public SubTboCategories SubTboCategories
		{
			get
			{
				return this._SubTboCategories.Entity;
			}
			set
			{
				SubTboCategories previousValue = this._SubTboCategories.Entity;
				if (((previousValue != value) 
							|| (this._SubTboCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubTboCategories.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._SubTboCategories.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._ProductCategorie = value.CategoryID;
					}
					else
					{
						this._ProductCategorie = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubTboCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OpeationProduct(OpeationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OpeationProduct(OpeationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sale")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleID;
		
		private System.DateTime _SaleDate;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<decimal> _TotalDiscount;
		
		private int _PaymentMethodSale;
		
		private EntitySet<OpeationProduct> _OpeationProduct;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<SubTboPaymentMethod> _SubTboPaymentMethod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleIDChanging(int value);
    partial void OnSaleIDChanged();
    partial void OnSaleDateChanging(System.DateTime value);
    partial void OnSaleDateChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnTotalDiscountChanging(System.Nullable<decimal> value);
    partial void OnTotalDiscountChanged();
    partial void OnPaymentMethodSaleChanging(int value);
    partial void OnPaymentMethodSaleChanged();
    #endregion
		
		public Sale()
		{
			this._OpeationProduct = new EntitySet<OpeationProduct>(new Action<OpeationProduct>(this.attach_OpeationProduct), new Action<OpeationProduct>(this.detach_OpeationProduct));
			this._Customer = default(EntityRef<Customer>);
			this._SubTboPaymentMethod = default(EntityRef<SubTboPaymentMethod>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDate", DbType="Date NOT NULL")]
		public System.DateTime SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalDiscount
		{
			get
			{
				return this._TotalDiscount;
			}
			set
			{
				if ((this._TotalDiscount != value))
				{
					this.OnTotalDiscountChanging(value);
					this.SendPropertyChanging();
					this._TotalDiscount = value;
					this.SendPropertyChanged("TotalDiscount");
					this.OnTotalDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodSale", DbType="Int NOT NULL")]
		public int PaymentMethodSale
		{
			get
			{
				return this._PaymentMethodSale;
			}
			set
			{
				if ((this._PaymentMethodSale != value))
				{
					if (this._SubTboPaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodSaleChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodSale = value;
					this.SendPropertyChanged("PaymentMethodSale");
					this.OnPaymentMethodSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_OpeationProduct", Storage="_OpeationProduct", ThisKey="SaleID", OtherKey="SaleProduct")]
		public EntitySet<OpeationProduct> OpeationProduct
		{
			get
			{
				return this._OpeationProduct;
			}
			set
			{
				this._OpeationProduct.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sale.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sale.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboPaymentMethod_Sale", Storage="_SubTboPaymentMethod", ThisKey="PaymentMethodSale", OtherKey="PaymentMethodID", IsForeignKey=true)]
		public SubTboPaymentMethod SubTboPaymentMethod
		{
			get
			{
				return this._SubTboPaymentMethod.Entity;
			}
			set
			{
				SubTboPaymentMethod previousValue = this._SubTboPaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._SubTboPaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubTboPaymentMethod.Entity = null;
						previousValue.Sale.Remove(this);
					}
					this._SubTboPaymentMethod.Entity = value;
					if ((value != null))
					{
						value.Sale.Add(this);
						this._PaymentMethodSale = value.PaymentMethodID;
					}
					else
					{
						this._PaymentMethodSale = default(int);
					}
					this.SendPropertyChanged("SubTboPaymentMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OpeationProduct(OpeationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_OpeationProduct(OpeationProduct entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.Nullable<int> _ProductID;
		
		private System.Nullable<int> _Piece;
		
		private System.DateTime _StockEntryDate;
		
		private string _ProductManufacturer;
		
		private System.Nullable<decimal> _PurchasePrice;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnPieceChanging(System.Nullable<int> value);
    partial void OnPieceChanged();
    partial void OnStockEntryDateChanging(System.DateTime value);
    partial void OnStockEntryDateChanged();
    partial void OnProductManufacturerChanging(string value);
    partial void OnProductManufacturerChanged();
    partial void OnPurchasePriceChanging(System.Nullable<decimal> value);
    partial void OnPurchasePriceChanged();
    #endregion
		
		public Stock()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Piece", DbType="Int")]
		public System.Nullable<int> Piece
		{
			get
			{
				return this._Piece;
			}
			set
			{
				if ((this._Piece != value))
				{
					this.OnPieceChanging(value);
					this.SendPropertyChanging();
					this._Piece = value;
					this.SendPropertyChanged("Piece");
					this.OnPieceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockEntryDate", DbType="Date NOT NULL")]
		public System.DateTime StockEntryDate
		{
			get
			{
				return this._StockEntryDate;
			}
			set
			{
				if ((this._StockEntryDate != value))
				{
					this.OnStockEntryDateChanging(value);
					this.SendPropertyChanging();
					this._StockEntryDate = value;
					this.SendPropertyChanged("StockEntryDate");
					this.OnStockEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductManufacturer", DbType="NVarChar(150)")]
		public string ProductManufacturer
		{
			get
			{
				return this._ProductManufacturer;
			}
			set
			{
				if ((this._ProductManufacturer != value))
				{
					this.OnProductManufacturerChanging(value);
					this.SendPropertyChanging();
					this._ProductManufacturer = value;
					this.SendPropertyChanged("ProductManufacturer");
					this.OnProductManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stock", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Stock.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Stock.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubTboCategories")]
	public partial class SubTboCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public SubTboCategories()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboCategories_Product", Storage="_Product", ThisKey="CategoryID", OtherKey="ProductCategorie")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.SubTboCategories = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.SubTboCategories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubTboPaymentMethod")]
	public partial class SubTboPaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentMethodID;
		
		private string _PaymentMethodName;
		
		private EntitySet<Sale> _Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentMethodIDChanging(int value);
    partial void OnPaymentMethodIDChanged();
    partial void OnPaymentMethodNameChanging(string value);
    partial void OnPaymentMethodNameChanged();
    #endregion
		
		public SubTboPaymentMethod()
		{
			this._Sale = new EntitySet<Sale>(new Action<Sale>(this.attach_Sale), new Action<Sale>(this.detach_Sale));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentMethodID
		{
			get
			{
				return this._PaymentMethodID;
			}
			set
			{
				if ((this._PaymentMethodID != value))
				{
					this.OnPaymentMethodIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodID = value;
					this.SendPropertyChanged("PaymentMethodID");
					this.OnPaymentMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PaymentMethodName
		{
			get
			{
				return this._PaymentMethodName;
			}
			set
			{
				if ((this._PaymentMethodName != value))
				{
					this.OnPaymentMethodNameChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodName = value;
					this.SendPropertyChanged("PaymentMethodName");
					this.OnPaymentMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboPaymentMethod_Sale", Storage="_Sale", ThisKey="PaymentMethodID", OtherKey="PaymentMethodSale")]
		public EntitySet<Sale> Sale
		{
			get
			{
				return this._Sale;
			}
			set
			{
				this._Sale.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sale(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SubTboPaymentMethod = this;
		}
		
		private void detach_Sale(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SubTboPaymentMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubTboProccesList")]
	public partial class SubTboProccesList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProccesID;
		
		private string _ProccesName;
		
		private EntitySet<CustomerProcces> _CustomerProcces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProccesIDChanging(int value);
    partial void OnProccesIDChanged();
    partial void OnProccesNameChanging(string value);
    partial void OnProccesNameChanged();
    #endregion
		
		public SubTboProccesList()
		{
			this._CustomerProcces = new EntitySet<CustomerProcces>(new Action<CustomerProcces>(this.attach_CustomerProcces), new Action<CustomerProcces>(this.detach_CustomerProcces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProccesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProccesID
		{
			get
			{
				return this._ProccesID;
			}
			set
			{
				if ((this._ProccesID != value))
				{
					this.OnProccesIDChanging(value);
					this.SendPropertyChanging();
					this._ProccesID = value;
					this.SendPropertyChanged("ProccesID");
					this.OnProccesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProccesName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProccesName
		{
			get
			{
				return this._ProccesName;
			}
			set
			{
				if ((this._ProccesName != value))
				{
					this.OnProccesNameChanging(value);
					this.SendPropertyChanging();
					this._ProccesName = value;
					this.SendPropertyChanged("ProccesName");
					this.OnProccesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboProccesList_CustomerProcces", Storage="_CustomerProcces", ThisKey="ProccesID", OtherKey="ProccesType")]
		public EntitySet<CustomerProcces> CustomerProcces
		{
			get
			{
				return this._CustomerProcces;
			}
			set
			{
				this._CustomerProcces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerProcces(CustomerProcces entity)
		{
			this.SendPropertyChanging();
			entity.SubTboProccesList = this;
		}
		
		private void detach_CustomerProcces(CustomerProcces entity)
		{
			this.SendPropertyChanging();
			entity.SubTboProccesList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubTboRefCustomer")]
	public partial class SubTboRefCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefUserID;
		
		private string _RefUserName;
		
		private string _RefUserSurname;
		
		private EntitySet<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefUserIDChanging(int value);
    partial void OnRefUserIDChanged();
    partial void OnRefUserNameChanging(string value);
    partial void OnRefUserNameChanged();
    partial void OnRefUserSurnameChanging(string value);
    partial void OnRefUserSurnameChanged();
    #endregion
		
		public SubTboRefCustomer()
		{
			this._Customer = new EntitySet<Customer>(new Action<Customer>(this.attach_Customer), new Action<Customer>(this.detach_Customer));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefUserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RefUserID
		{
			get
			{
				return this._RefUserID;
			}
			set
			{
				if ((this._RefUserID != value))
				{
					this.OnRefUserIDChanging(value);
					this.SendPropertyChanging();
					this._RefUserID = value;
					this.SendPropertyChanged("RefUserID");
					this.OnRefUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefUserName", DbType="NVarChar(150)")]
		public string RefUserName
		{
			get
			{
				return this._RefUserName;
			}
			set
			{
				if ((this._RefUserName != value))
				{
					this.OnRefUserNameChanging(value);
					this.SendPropertyChanging();
					this._RefUserName = value;
					this.SendPropertyChanged("RefUserName");
					this.OnRefUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefUserSurname", DbType="NVarChar(150)")]
		public string RefUserSurname
		{
			get
			{
				return this._RefUserSurname;
			}
			set
			{
				if ((this._RefUserSurname != value))
				{
					this.OnRefUserSurnameChanging(value);
					this.SendPropertyChanging();
					this._RefUserSurname = value;
					this.SendPropertyChanged("RefUserSurname");
					this.OnRefUserSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubTboRefCustomer_Customer", Storage="_Customer", ThisKey="RefUserID", OtherKey="CustomerReference")]
		public EntitySet<Customer> Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				this._Customer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SubTboRefCustomer = this;
		}
		
		private void detach_Customer(Customer entity)
		{
			this.SendPropertyChanging();
			entity.SubTboRefCustomer = null;
		}
	}
}
#pragma warning restore 1591
